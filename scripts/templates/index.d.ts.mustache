/**
 * This declaration file requires TypeScript 2.1 or above.
 */

declare namespace BitBucket {
  export type Any = any;
  export type AnyObject = object;

  export interface Options {
    baseUrl?: string;
    headers?: {[header: string]: any};
    options?: AnyObject;
  }

  interface AuthBasic {
    type: "basic";
    username: string;
    password: string;
  }

  interface AuthAppPassword {
    type: "apppassword";
    username: string;
    password: string;
  }

  interface AuthToken {
    type: "token";
    token: string;
  }

  export type Auth =
    | AuthBasic
    | AuthAppPassword
    | AuthToken;

  export type PaginatedData =
    | { next: string; }
    | { previous: string; };

  export interface Callback<T> {
    (error: BitBucket.Schema.Error | null, response: T): void;
  }

  export interface Response<T> {
    data: T;
    headers: any;
  }

  namespace Schema {
    export type Any = BitBucket.Any;

    {{{typesBlob}}}
  }

  namespace Params {
    export type Empty = {}

    {{#namespaces}}
    {{#apis}}
    {{^exclude}}
    {{#paramsType}}
    export type {{paramsType}} =
      {{#ownParams}}
      {
      {{#params}}
        "{{name}}"{{^required}}?{{/required}}: {{#schema}}BitBucket.Schema.{{/schema}}{{{type}}};
      {{/params}}
      };
      {{/ownParams}}
      {{^ownParams}}
      ;
      {{/ownParams}}
    {{/paramsType}}
    {{/exclude}}
    {{/apis}}
    {{/namespaces}}
  }
}

declare class BitBucket {
  constructor(options?: BitBucket.Options);

  authenticate(auth: BitBucket.Auth): void;

  hasNextPage(data: BitBucket.PaginatedData): boolean;
  getNextPage<T>(data: T, callback?: BitBucket.Callback<BitBucket.Response<T>>): Promise<BitBucket.Response<T>>;

  hasPreviousPage(data: BitBucket.PaginatedData): boolean;
  getPreviousPage<T>(data: T, callback?: BitBucket.Callback<BitBucket.Response<T>>): Promise<BitBucket.Response<T>>;

  {{#namespaces}}
  {{namespace}}: {
    {{#apis}}
    {{name}}(params: BitBucket.Params.{{paramsType}}, callback?: BitBucket.Callback<BitBucket.Response<BitBucket.Schema.{{responseType}}>>): Promise<BitBucket.Response<BitBucket.Schema.{{responseType}}>>;
    {{/apis}}
  };
  {{/namespaces}}
}

export = BitBucket;

export as namespace BitBucket;
