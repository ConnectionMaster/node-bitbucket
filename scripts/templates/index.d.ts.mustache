/**
 * This declaration file requires TypeScript 2.1 or above.
 */

declare namespace BitBucket {
  export interface EmptyParams {
  }

  export interface Options {
    baseUrl?: string;
    headers?: {[header: string]: any};
    options?: any;
  }

  interface AuthBasic {
    type: "basic";
    username: string;
    password: string;
  }

  interface AuthAppPassword {
    type: "apppassword";
    username: string;
    password: string;
  }

  interface AuthToken {
    type: "token";
    token: string;
  }

  export type Auth =
    | AuthBasic
    | AuthAppPassword
    | AuthToken;

  export type Link =
    | { next: string; }
    | { previous: string; }
    | string;

  export interface Callback<T> {
    (error: BitBucket.Type.Error | null, response: T): void;
  }

  export interface Response<T> {
    data: T;
    headers: any;
  }

  namespace Type {
    export type Any = any

    {{{typesBlob}}}
  }

  {{#namespaces}}
  {{#methods}}
  {{^exclude}}
  {{#paramTypeName}}
  export type {{paramTypeName}} =
    {{#ownParams}}
    & {
    {{#params}}
      "{{key}}"{{^required}}?{{/required}}: {{#schema}}BitBucket.Type.{{/schema}}{{{type}}};
    {{/params}}
    };
    {{/ownParams}}
    {{^ownParams}}
    ;
    {{/ownParams}}
  {{/paramTypeName}}
  {{/exclude}}
  {{/methods}}
  {{/namespaces}}
}

declare class BitBucket {
  constructor(options?: BitBucket.Options);

  authenticate(auth: BitBucket.Auth): void;

  nextPage(data: BitBucket.Link): string | undefined;
  previousPage(data: BitBucket.Link): string | undefined;
  getPage(url: BitBucket.Link, callback?: BitBucket.Callback<BitBucket.Response<BitBucket.Type.Any>>): Promise<BitBucket.Response<BitBucket.Type.Any>>;

  {{#namespaces}}
  {{namespace}}: {
    {{#methods}}
    {{method}}({{#paramTypeName}}params: BitBucket.{{.}}, {{/paramTypeName}}callback?: BitBucket.Callback<BitBucket.Response<BitBucket.Type.{{responseType}}>>): Promise<BitBucket.Response<BitBucket.Type.{{responseType}}>>;
    {{/methods}}
  };
  {{/namespaces}}
}

export = BitBucket
